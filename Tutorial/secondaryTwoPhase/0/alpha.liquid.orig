/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha.liquid;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 1;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform 1;
    }
    outlet
    {

	type            inletOutlet;
        phi             phi.liquid;	
        inletValue      $internalField;
        value           $internalField;
    }
    wall_cathode
    {

        
        type            codedFixedValue;
        value           uniform 0.99;

    // Name of generated boundary condition
        name    alphaliquid_cathode;

        code
        #{
        	const fvPatch& p = this->patch();                                                                          // Actual boundary/patch
    		label patchID = p.patch().boundaryMesh().findPatchID("wall_cathode");                                       // Desired patch ID
        	const fvMesh& mesh = patch().boundaryMesh().mesh();

        	const volScalarField& alpha_ = this->db().objectRegistry::template lookupObject<volScalarField>("alpha.gas");   // Desired field 1
        	const scalarField alpha_boundary = alpha_.boundaryField()[patchID];  
        	operator==(1.0-alpha_boundary);
        #};
        
    }
    wall_anode
    {
        type            codedFixedValue;
        value           uniform 0.99;

    // Name of generated boundary condition
        name    alphaliquid_anode;

        code
        #{
        	const fvPatch& p = this->patch();                                                                          // Actual boundary/patch
    		label patchID = p.patch().boundaryMesh().findPatchID("wall_anode");                                       // Desired patch ID
        	const fvMesh& mesh = patch().boundaryMesh().mesh();

        	const volScalarField& alpha_ = this->db().objectRegistry::template lookupObject<volScalarField>("alpha.gas");   // Desired field 1
        	const scalarField alpha_boundary = alpha_.boundaryField()[patchID];  
        	operator==(1.0-alpha_boundary);
        #};
        
        
    }
    wall_isolation
    {
        type               zeroGradient;
    }
    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
